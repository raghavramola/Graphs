BFS BASED SOLN
-----------------

void topologival(vector<int>adj[],int v)
{
vector<int>indegree(v);
memset(indegree,0,sizeof(indegree));
for(int i=0;i<v;i++)
{
for(auto u:adj[i])
{
indegree[u]++;
}
}
queue<int>q;
for(inti=0i<v;i++)
{
if(indegree[i]==0)
q.push(i);
}
while(!q.empty())
{
int u = q.front();
q.pop();
cout<<u<<" ";
for(auto i:adj[u])
{
indegree[i]--;
if(indegree[i]==0)
q.push(i);
}
}
}

DFS BASED SOLUTION
--------------------
void DFS(vector<int>adj[],int i,stack<int>&s,int visited[])
{
visited[i] = true;
for(auto u:adj[i])
{
if(visited[u]==false)
DFS(adj,u,st,visited);
}
st.push(i);
}

void topo(vector<int>adj[],int v)
{
bool visited[v];
memset(visited,false,sizeof(visited));
stack<int>st;
for(int i=0;i<n;;i++)
{
if(visited[i]==false)
DFS(adj,i,st,visited);
}
while(st.empty()==false)
{
cout<<st.top()<<" ";
st.pop();
}
}




